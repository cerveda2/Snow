package cz.dcervenka.snow.network

import okhttp3.Interceptor
import okhttp3.Response
import okio.Buffer
import timber.log.Timber
import java.nio.charset.Charset

/**
 * An OkHttp interceptor that logs requests as curl shell commands. They can then
 * be copied, pasted and executed inside a terminal environment. This might be
 * useful for troubleshooting client/server API interaction during development,
 * making it easy to isolate and share requests made by the app.
 *
 * Warning: The
 * logs generated by this interceptor have the potential to leak sensitive
 * information. It should only be used in a controlled manner or in a
 * non-production environment.
 */
class CurlLoggingInterceptor : Interceptor {

    companion object {
        private val UTF8 = Charset.forName("UTF-8")
        private const val MAX_BODY_SIZE: Long = 10485760 // 10 MB
        private const val MAX_BODY_SIZE_MESSAGE: String = "BODY EXCEEDS 10MB, USE SMALLER ATTACHMENT!"
    }

    /** Set any additional curl command options (see 'curl --help').  */
    var curlOptions: String? = null

    override fun intercept(chain: Interceptor.Chain): Response {
        val request = chain.request()
        var compressed = false
        var curlCmd = "curl"
        var httpieCmd = "http"

        curlOptions?.let { curlCmd += " $it" }

        curlCmd += " --insecure" //self signed certifcates
        curlCmd += " -X " + request.method

        httpieCmd += " --verify=no" //self signed certifcates
        httpieCmd += " " + request.method
        httpieCmd += " \"" + request.url + "\""

        val headers = request.headers
        var i = 0
        val count = headers.size

        while (i < count) {
            val name = headers.name(i)
            val value = headers.value(i)

            if ("Accept-Encoding".equals(name, ignoreCase = true) && "gzip".equals(value, ignoreCase = true)) {
                compressed = true
            }
            curlCmd += " -H \"$name: $value\""
            httpieCmd += " $name:'$value'"
            i++
        }

        request.body?.let {
            if (it.contentLength() > MAX_BODY_SIZE) {
                // Limit body size to max 10mb. Otherwise we might encounter OOM when converting it to string
                curlCmd += " --data $'$MAX_BODY_SIZE_MESSAGE'"
                httpieCmd = "echo '$MAX_BODY_SIZE_MESSAGE' | $httpieCmd"
                return@let
            }
            val buffer = Buffer()
            it.writeTo(buffer)
            var charset = UTF8

            it.contentType()?.run {
                charset = this.charset(UTF8)
            }
            val postData = buffer.readString(charset).replace("\n", "\\n")
            curlCmd += " --data $'$postData'"
            httpieCmd = "echo '$postData' | $httpieCmd"
        }

        curlCmd += (if (compressed) " --compressed " else " ") + "\"" + request.url + "\""

        Timber.v(curlCmd)
        Timber.v(httpieCmd)
        Timber.v("â•°--- (copy and paste the above line to a terminal)")

        return chain.proceed(request)
    }
}